from collections import Counter
import numpy as np
import string

def tokenizer(text):
    '''
    This function takes a string, removes punctuations, splits the string at spaces and returns a list of words
    :param text:
    :return: tokens (list of words)
    '''

    tokens = [word.strip(string.punctuation) for word in text.split()]
    return tokens

def csr_matrix(row,col,val,shape):
    '''
    This functions creates a csr matrix from row index, column index, value at index, shape of the matrix that are passed in as parameters to this function.
    It returns a 2D array which is the csr matrix
    :param row:
    :param col:
    :param val:
    :param shape:
    :return:
    '''
    mat = np.zeros(shape)
    x = zip(row, col, val)
    for each in x:
        mat[each[0]][each[1]] = each[2]

    return mat

def countVectorizer(data):
    '''
    CountVectorizer is used to convert a collection of text documents to a vector of term/token counts. It takes in data which is the list of text inputs.
    It returns a sparse matrrix which is generrated using csr_matrix function
    :param data:
    :return:
    '''
    full_text = " ".join(data)
    token = tokenizer(full_text)
    corpus = set(token)

    vocab = {}
    row, col, val = [], [], []

    for index, word in enumerate(sorted(list(corpus))):
        vocab[word] = index

    for idx, text in enumerate(data):
        count_word = dict(Counter(tokenizer(text)))

        for word, count in count_word.items():

            col_index = vocab.get(word)
            row.append(idx)
            col.append(col_index)
            val.append(count)

    sparse_matrix = csr_matrix(row, col, val, shape=[len(data), len(vocab)])

    return sparse_matrix

def cosine_similarity(matrix):
    '''
    This fucntion takes in the matrix generated by countvectorizer and returns the similarity coefficient of the two texts.
    :param matrix:
    :return:
    '''
    text_1_array = matrix[0]
    text_2_array = matrix[1]
    dot_product = np.dot(text_1_array,text_2_array)
    norm_a = np.linalg.norm(text_1_array)
    norm_b = np.linalg.norm(text_2_array)
    return dot_product / (norm_a * norm_b)

def get_similarity(text_1,text_2):
    '''
    This function takes in the texts by the user in the flask application and returns the similarity coefficinet of the texts by using all the above functions
    :param text_1:
    :param text_2:
    :return:
    '''

    data = [text_1,text_2]
    count_matrix = countVectorizer(data)
    similarity = cosine_similarity(count_matrix)

    return round(similarity*100,2)


